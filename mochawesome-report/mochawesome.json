{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-05T07:47:03.693Z",
    "end": "2023-03-05T07:47:03.981Z",
    "duration": 288,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3956606f-3ff3-4d4f-975a-169155f060b0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0bf965a0-077e-4951-91ab-42a867bfef05",
          "title": "testing server",
          "fullFile": "D:\\BlockchainDev\\web2Stuffs\\Youtube_Subscribers\\__tests__\\router.test.js",
          "file": "\\__tests__\\router.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"testing server\"",
              "fullTitle": "testing server \"before all\" hook in \"testing server\"",
              "timedOut": false,
              "duration": 127,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Starting the server on port 3000\n        server = app.listen(3000, () => {\n            console.log('Server started')\n        })\n        // Connecting to the test database\n        const DATABASE_URL = \"mongodb://localhost:27017/TestSubscribers\";\n        mongoose.connect(DATABASE_URL, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });\n        const db = mongoose.connection\n        \n        // Logging any errors\n        db.on('error', (err) => console.log(err))\n        // Logging when the connection is successful\n        db.once('open', () => console.log('connected to database'))\n        // Deleting any existing documents and adding sample data\n        await subscriberModel.deleteMany({})\n        await subscriberModel.insertMany(data)\n        // Finding a sample document to use in later tests (/subscribers/:id)\n        sampleDoc = await subscriberModel.findOne({ name: 'John Doe' })",
              "err": {},
              "uuid": "0dae4369-4d0b-407e-95cd-94050580ada9",
              "parentUUID": "0bf965a0-077e-4951-91ab-42a867bfef05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"testing server\"",
              "fullTitle": "testing server \"after all\" hook in \"testing server\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server.close(() => {\n    console.log('Server stopped');\n})\nawait mongoose.disconnect();",
              "err": {},
              "uuid": "83915e00-cbd6-43ec-85c9-e492bdb98c1c",
              "parentUUID": "0bf965a0-077e-4951-91ab-42a867bfef05",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "374a89c4-fce4-4410-9139-0fc938043e02",
              "title": "testing the API",
              "fullFile": "D:\\BlockchainDev\\web2Stuffs\\Youtube_Subscribers\\__tests__\\router.test.js",
              "file": "\\__tests__\\router.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return welcome message with endpoints",
                  "fullTitle": "testing server testing the API should return welcome message with endpoints",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/')\nchai.expect(res.status).to.equal(200)\nchai.expect(res.body.welcome).to.equal('This is an API created for Youtube Subscribers Backend Project')\nchai.expect(res.body.endpoints).to.deep.equal({\n    toGetAllSubsribers: '/subscribers',\n    toGetAllSubsribersNames: '/subscribers/names',\n    toGetSubscribersByID: '/subscribers/:id'\n})",
                  "err": {},
                  "uuid": "74bf5e88-0c8b-4a24-85c6-c8f08924f48d",
                  "parentUUID": "374a89c4-fce4-4410-9139-0fc938043e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return subscribers",
                  "fullTitle": "testing server testing the API should return subscribers",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/subscribers')\n            \n            chai.expect(res.status).to.equal(200)\n            chai.expect(res.body.subscribers[0].name).to.equal(\"Jeread Krus\")\n            chai.expect(res.body.subscribers[0].subscribedChannel).to.equal(\"CNET\")\n            chai.expect(res.body.subscribers[1].name).to.equal(\"John Doe\")\n            chai.expect(res.body.subscribers[1].subscribedChannel).to.equal(\"freeCodeCamp.org\")\n            chai.expect(res.body.subscribers[2].name).to.equal(\"Lucifer\")\n            chai.expect(res.body.subscribers[2].subscribedChannel).to.equal(\"Sentex\")",
                  "err": {},
                  "uuid": "c19087b3-28c3-4d03-8bd5-1f6b74b0d2ba",
                  "parentUUID": "374a89c4-fce4-4410-9139-0fc938043e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return subscribers with names",
                  "fullTitle": "testing server testing the API should return subscribers with names",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/subscribers/names')\nchai.expect(res.status).to.equal(200)\n// since this endpoint only returns docs with name and subscribedChannel I am expecting it to be equal to the given object. \nchai.expect(res.body.subscribers).to.deep.equal([{\n    \"name\": \"Jeread Krus\",\n    \"subscribedChannel\": \"CNET\"\n},\n{\n    \"name\": \"John Doe\",\n    \"subscribedChannel\": \"freeCodeCamp.org\"\n},\n{\n    \"name\": \"Lucifer\",\n    \"subscribedChannel\": \"Sentex\"\n}])",
                  "err": {},
                  "uuid": "03b437d6-cb2b-473d-9639-31682d116eba",
                  "parentUUID": "374a89c4-fce4-4410-9139-0fc938043e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return subscribers with id",
                  "fullTitle": "testing server testing the API should return subscribers with id",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get(`/subscribers/${sampleDoc._id}`)\nchai.expect(res.status).to.equal(200)\nchai.expect(res.body.name).to.equal('John Doe')\nchai.expect(res.body.subscribedChannel).to.equal('freeCodeCamp.org')",
                  "err": {},
                  "uuid": "d2602746-e5ce-4838-84fa-bbaae4ab8352",
                  "parentUUID": "374a89c4-fce4-4410-9139-0fc938043e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return status 400 and error message if id not found",
                  "fullTitle": "testing server testing the API Should return status 400 and error message if id not found",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get(`/subscribers/123456`)\nchai.expect(res.status).to.equal(400)\nchai.expect(res.body.message).to.equal('Subscriber not found for id 123456')",
                  "err": {},
                  "uuid": "021e80eb-c370-4075-a480-69a259edbc0c",
                  "parentUUID": "374a89c4-fce4-4410-9139-0fc938043e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74bf5e88-0c8b-4a24-85c6-c8f08924f48d",
                "c19087b3-28c3-4d03-8bd5-1f6b74b0d2ba",
                "03b437d6-cb2b-473d-9639-31682d116eba",
                "d2602746-e5ce-4838-84fa-bbaae4ab8352",
                "021e80eb-c370-4075-a480-69a259edbc0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
          "title": "Subscriber Model",
          "fullFile": "D:\\BlockchainDev\\web2Stuffs\\Youtube_Subscribers\\__tests__\\schema.test.js",
          "file": "\\__tests__\\schema.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Subscriber Model\"",
              "fullTitle": "Subscriber Model \"before all\" hook in \"Subscriber Model\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const DATABASE_URL = \"mongodb://localhost:27017/TestSubscribers\";\nawait mongoose.connect(DATABASE_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});",
              "err": {},
              "uuid": "6aaf3ba7-1f4c-407c-83a7-f115d08ef5ed",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Subscriber Model\"",
              "fullTitle": "Subscriber Model \"after all\" hook in \"Subscriber Model\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.db.dropDatabase();\nawait mongoose.disconnect();",
              "err": {},
              "uuid": "96cb35c6-3718-4eb1-b21c-3ba7e7670888",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Subscriber Model\"",
              "fullTitle": "Subscriber Model \"after each\" hook in \"Subscriber Model\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Subscriber.deleteMany({});",
              "err": {},
              "uuid": "c747e9c4-d9a7-45c6-9175-3e4ad7321691",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new subscriber",
              "fullTitle": "Subscriber Model should create a new subscriber",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = new Subscriber({\n  name: 'John Doe',\n  subscribedChannel: 'freeCodeCamp.org'\n});\n// Saving the new subscriber object to database\nconst savedSubscriber = await newSubscriber.save();\n// Assertion for saved subscriber object\nexpect(savedSubscriber).to.have.property('_id');\nexpect(savedSubscriber.name).to.equal('John Doe');\nexpect(savedSubscriber.subscribedChannel).to.equal('freeCodeCamp.org');\nexpect(savedSubscriber.subscribedDate).to.be.a('date');",
              "err": {},
              "uuid": "09b3870a-9fa6-48b7-a362-696caad9e5fa",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not save a subscriber without a name",
              "fullTitle": "Subscriber Model should not save a subscriber without a name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = new Subscriber({\n  subscribedChannel: 'freeCodeCamp.org'\n});\n// Expecting the new subscriber object without name to not save\nawait expect(newSubscriber.save()).to.be.rejectedWith('Subscriber validation failed');",
              "err": {},
              "uuid": "d63b403e-899a-42b1-bd28-43c329b3ac15",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not save a subscriber without a subscribedChannel",
              "fullTitle": "Subscriber Model should not save a subscriber without a subscribedChannel",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = new Subscriber({\n  name: 'John Doe'\n});\n// Expecting the new subscriber object without subscribed channel to not save\nawait expect(newSubscriber.save()).to.be.rejectedWith('Subscriber validation failed');",
              "err": {},
              "uuid": "b253bd18-3cf2-473d-9491-9605d6971903",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a subscriber by ID",
              "fullTitle": "Subscriber Model should find a subscriber by ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = new Subscriber({\n  name: 'John Doe',\n  subscribedChannel: 'freeCodeCamp.org'\n});\n// Saving the new subscriber object to database\nconst savedSubscriber = await newSubscriber.save();\n// Finding the saved subscriber object by its ID\nconst foundSubscriber = await Subscriber.findById(savedSubscriber._id);\n// Assertion for the found subscriber object\nexpect(foundSubscriber).to.have.property('_id');\nexpect(foundSubscriber.name).to.equal('John Doe');\nexpect(foundSubscriber.subscribedChannel).to.equal('freeCodeCamp.org');\nexpect(foundSubscriber.subscribedDate).to.be.a('date');",
              "err": {},
              "uuid": "3e5e32a7-2f15-4b1e-bb27-6cecc8181c35",
              "parentUUID": "0ff882c5-027b-4c73-a02e-0ec52a96076d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09b3870a-9fa6-48b7-a362-696caad9e5fa",
            "d63b403e-899a-42b1-bd28-43c329b3ac15",
            "b253bd18-3cf2-473d-9491-9605d6971903",
            "3e5e32a7-2f15-4b1e-bb27-6cecc8181c35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}